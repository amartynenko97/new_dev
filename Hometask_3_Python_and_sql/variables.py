
ROWS_FOR_RED_ZONE = 376
ROWS_FOR_GREEN_ZONE = 1372
ROWS_FOR_BLUE_ZONE = 754
# 1/math.pi*math.acos(math.cos(start_value+100))*((upper_limit-bottom_limit1)+bottom_limit2) The first line is generated by this formula. We get a random number in the range.
# 1/math.pi*math.acos(math.cos(start_value * coefficient_for_high_dispersion))*((upper_limit-bottom_limit1)+bottom_limit2) All the following lines are generated by binding the "start_value"
# to the previously generated values of the previous line, providing pseudo randomness.
FIND_PSEUDORANDOM_ROWS1 = {0 : {range(0, 1) : {'start_value' : 100, 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                                # column_for_hex_id_generation
                                range(1, 2501) : { 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1, 'coefficient_for_high_dispersion' : 666666}
                                },

                           1 : {range(0, 1) : {'start_value' : 250, 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                                # column_for_provider_generation
                                range(1, 2501) : {'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1, 'coefficient_for_high_dispersion' : 555555}
                                },

                           2 : {range(0, 1) : {'start_value' : 450, 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                                # column_for_direction_generation
                                range(1, 2501) : {'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1, 'coefficient_for_high_dispersion' : 444444}
                                },

                           3 : {range(0, 1) : {'start_value' : 250, 'upper_limit' : 10, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                               # column_for_provider_generation
                                range(1, 2501) : {'upper_limit' : 10, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1, 'coefficient_for_high_dispersion' : 555555}
                                },

                           4 : {range(0, 1) : {'start_value' : 250, 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                                # column_for_add_to_create_date + time_after_break                                                          # column_for_instrument
                                range(1, 2501) : {'upper_limit' : 300, 'bottom_limit1' : 1, 'bottom_limit2' : 1, 'coefficient_for_high_dispersion' : 333333}
                                },

                           5 : {range(0, 1) : {'start_value' : 3333.3333, 'start_time_unix' : 1669118400},                                                           # column_for_change_date
                                range(1, 376) : {'upper_limit' : 3300, 'bottom_limit1' : 1, 'bottom_limit2' : 1, 'coefficient_for_high_dispersion' : 777777, 'start_time_unix' : 1669118400},    # Redzone 11:00 - 12:00
                                range(376, 1749) : {'upper_limit' : 78900, 'bottom_limit1' : 1, 'bottom_limit2' : 1, 'coefficient_for_high_dispersion' : 717171, 'start_time_unix' : 1669122000},# Greenzone 12:00 - 11:00
                                range(1749, 2501) : {'upper_limit' : 3300, 'bottom_limit1' : 1, 'bottom_limit2' : 1, 'coefficient_for_high_dispersion' : 707070, 'start_time_unix' : 1669201200} # Bluezone 11:00 - 12:00
                                },

                           6 : {range(0, 1) : {'start_value' : 666, 'upper_limit' : 10, 'bottom_limit1' : 10, 'bottom_limit2' : 1},                                   # column_for_changedate_increase_to createdate
                                range(1, 2500) : {'upper_limit' : 100, 'bottom_limit1' : 10, 'bottom_limit2' : 10, 'coefficient_for_high_dispersion' : 777777}
                                }, 

                           7 : {range(0, 1) : {'start_value' : 123, 'upper_limit' : 1, 'bottom_limit1' : 0.1, 'bottom_limit2' : 0.1},                                 # column_for_status
                                range(1, 376) : {'upper_limit' : 6, 'bottom_limit1' : 0.01, 'bottom_limit2' : 0.01, 'coefficient_for_high_dispersion' : 177777},      # redzone_status_without_new
                                range(376, 1749) : {'upper_limit' : 2, 'bottom_limit1' : 0.01, 'bottom_limit2' : 0.01, 'coefficient_for_high_dispersion' : 277777},   # greenzone_status
                                range(1749, 2501) : {'upper_limit' : 2, 'bottom_limit1' : 0.01, 'bottom_limit2' : 0.01, 'coefficient_for_high_dispersion' : 377777}   # bluezone_status_without_done
                                },
                                                                                                                                                                          
                           8 : {range(0, 1)    : {0 : {'start_value' : 100, 'upper_limit' : 140,   'bottom_limit1' : 130.95, 'bottom_limit2' : 130.95}, # USDJPY     # for generation initial price linking with column
                                                  1 : {'start_value' : 100, 'upper_limit' : 1.30,  'bottom_limit1' : 1.12,   'bottom_limit2' : 1.12  }, # GBPUSD     # instrument
                                                  2 : {'start_value' : 100, 'upper_limit' : 0.99,  'bottom_limit1' : 0.9,    'bottom_limit2' : 0.9   }, # USDCHF
                                                  3 : {'start_value' : 100, 'upper_limit' : 0.720, 'bottom_limit1' : 0.670,  'bottom_limit2' : 0.670 }, # AUDUSD
                                                  4 : {'start_value' : 100, 'upper_limit' : 1.2,   'bottom_limit1' : 1.03,   'bottom_limit2' : 1.03  }, # EURUSD
                                                  5 : {'start_value' : 100, 'upper_limit' : 3.7,   'bottom_limit1' : 3.2323, 'bottom_limit2' : 3.2323}, # CADPLN
                                                  6 : {'start_value' : 100, 'upper_limit' : 88,    'bottom_limit1' : 80.65,  'bottom_limit2' : 80.65 }, # NZDJPY
                                                  7 : {'start_value' : 100, 'upper_limit' : 1.810, 'bottom_limit1' : 1.60,   'bottom_limit2' : 1.60  }, # GBPCAD
                                                  8 : {'start_value' : 100, 'upper_limit' : 0.65,  'bottom_limit1' : 0.55,   'bottom_limit2' : 0.55  }, # NZDCHF
                                                  9 : {'start_value' : 101, 'upper_limit' : 7.11,  'bottom_limit1' : 6.75,   'bottom_limit2' : 6.75  }, # MXNJPY
                                                 10 : {'start_value' : 100, 'upper_limit' : 1.09,  'bottom_limit1' :0.94,    'bottom_limit2' : 0.94  }},# EURCHF

                                                                                                                                                                       
                               range(1, 2500) :  {0 : {'upper_limit' : 140,   'bottom_limit1' : 130.95, 'bottom_limit2' : 130.95, 'coefficient_for_high_dispersion' : 666666}, # USDJPY
                                                  1 : {'upper_limit' : 1.30,  'bottom_limit1' : 1.12,   'bottom_limit2' : 1.12,   'coefficient_for_high_dispersion' : 666666}, # GBPUSD
                                                  2 : {'upper_limit' : 0.99,  'bottom_limit1' : 0.9,    'bottom_limit2' : 0.9,    'coefficient_for_high_dispersion' : 666666}, # USDCH
                                                  3 : {'upper_limit' : 0.720, 'bottom_limit1' : 0.670,  'bottom_limit2' : 0.670,  'coefficient_for_high_dispersion' : 666666}, # AUDUSD
                                                  4 : {'upper_limit' : 1.2,   'bottom_limit1' : 1.03,   'bottom_limit2' : 1.03,   'coefficient_for_high_dispersion' : 666666}, # EURUSD
                                                  5 : {'upper_limit' : 3.7,   'bottom_limit1' : 3.2323, 'bottom_limit2' : 3.2323, 'coefficient_for_high_dispersion' : 666666}, # CADPLN
                                                  6 : {'upper_limit' : 88,    'bottom_limit1' : 80.65,  'bottom_limit2' : 80.65,  'coefficient_for_high_dispersion' : 666666}, # NZDJPY
                                                  7 : {'upper_limit' : 1.810, 'bottom_limit1' : 1.60,   'bottom_limit2' : 1.60,   'coefficient_for_high_dispersion' : 666666}, # GBPCAD
                                                  8 : {'upper_limit' : 0.65,  'bottom_limit1' : 0.55,   'bottom_limit2' : 0.55,   'coefficient_for_high_dispersion' : 666666}, # NZDCHF
                                                  9 : {'upper_limit' : 7.11,  'bottom_limit1' : 6.75,   'bottom_limit2' : 6.75,   'coefficient_for_high_dispersion' : 666666}, # MXNJPY
                                                 10 : {'upper_limit' : 1.09,  'bottom_limit1' : 0.946,  'bottom_limit2' : 0.946,  'coefficient_for_high_dispersion' : 666666}  # EURCHF
                              }},

                           10 : {range(0, 1) : {'start_value' : 644, 'upper_limit' : 100000, 'bottom_limit1' : 1, 'bottom_limit2' : 1},                              # for generation initial volume in range 100000-1             
                                range(1, 2500) : {'upper_limit' : 100000, 'bottom_limit1' : 1, 'bottom_limit2' : 1, 'coefficient_for_high_dispersion' : 777777}
                              }}
                                                  

GET_VALUE_FROM_PSEUDORANDOM = {0 : {'hex_start_number' : str(hex(4374977048).lstrip("0x").upper().zfill(10))}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "hexid (column 0)"
                               1 : {0 : 'FXCM', 1 : 'SQM'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "provider (column 1)"
                               2 : {0 : 'sell', 1 : 'buy'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "direction (column 2)"
                               3 : {0 : 'USDJPY', 1 : 'GBPUSD', 2 : 'USDCHF', 3 : 'AUDUSD', 4 : 'EURUSD', 5 : 'CADPLN', 6 : 'NZDJPY', 7 : 'GBPCAD', 8 : 'NZDCHF', 9 : 'MXNJPY', 10 : 'EURCHF'}, #  get data for column "instrument(column 3)" 
                               8 : {'done' : True, 'part fill' : True, 'fill' : True, 'special_status' : 'reject'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "fill price (column 8)"
                              10 : {'part fill' : 0.555, 'fill' : 1, 'done' : 1, 'special_status' : 'reject'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "fill volume (column 10)"
                              11 : {'FXCM' : 'Forex Capital Markets', 'SQM' : 'Sociedad Quimica'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "Tags (column 11)"
                              12 : {range(0, 376) : 'Red zone', range(376, 1749) : 'Green zone', range(1749, 2501) : 'Blue zone'}, # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "Description (column 12)"
                              13 : {'sell' : 'I sell', 'buy' : 'I buy'}} # in "get_data_from_pseudo_random_rows" check the sequence against the dictionary key, get data for column "Tags (column 13)"


DICT_STATUS_GENERATE_ALL_ZONES =  {0 : {range(0, 376) :    {0 : ['done'],  # in "generate_status_all_zones". Get subsets of all possible status options for column "status (column 6) RED ZONE"
                                                            1 : ['reject', 'done'],
                                                            2 : ['part fill', 'done'],
                                                            3 : ['fill', 'done'],
                                                            4 : ['in progress', 'reject', 'done'],
                                                            5 : ['in progress', 'part fill', 'done'],
                                                            6 : ['in progress', 'fill', 'done']}},

                                   1 : {range(376, 1749) : {0 : ['new', 'in progress', 'reject', 'done'], # in "generate_status_all_zones". Get subsets of all possible status options for column "status (column 6) GREEN ZONE"
                                                            1 : ['new', 'in progress', 'part fill', 'done'],
                                                            2 : ['new', 'in progress', 'fill', 'done']}},
                                                    
   
                                   2 : {range(1749, 2501) : {0 : ['new', 'in progress', 'reject'], # in "generate_status_all_zones". Get subsets of all possible status options for column "status (column 6) BLUE ZONE"
                                                             1 : ['new', 'in progress', 'part fill'],
                                                             2 : ['new', 'in progress', 'fill']}}}
                                                       
IS_NEW_COLUMN_DICT = {          # used in a function "build_correct_table_based_on_statuses" to form "current_row"   
     range(0, 376):{"in progress": False, "fill": False, "part fill": False, "reject": False, "done": True}, 
     range(376, 1749):{"new": False, "in progress": False, "fill": False, "part fill": False, "reject": False, "done": True},
     range(1749, 2501):{"new": False, "in progress": False, "fill": True, "part fill": True, "reject": True}
     }

START_VALUE_GENERATION_ID = hex(4374977048)
INCREMENT_FOR_RANDOMNESS = 92832629
START_BREAK = 1669158000
END_BREAK = 1669161600
FORMAT_FOR_DATATIME = '%Y-%m-%d %H:%M:%S.%f%z'
ROWS = 2501
COLUMNS = 15
PATH_CONFIG_FILE = 'config.ini'


